import os
import time
import sqlite3
import logging
import requests
import webbrowser
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from flask import Flask, render_template_string, request, redirect, url_for
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_ERROR

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
PROFILE_ID = 'kxrosvb'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à AdsPower ID
SUBSCRIBER_URL = 'https://onlyfans.com/my/notifications/subscribed'
PURCHASES_URL = 'https://onlyfans.com/my/notifications/purchases'
TIPS_URL = 'https://onlyfans.com/my/notifications/tip'
DB_NAME = 'onlyfans_data.db'
ADSPOWER_API = 'http://localhost:50325/api/v1/browser/start'
LOG_FILE = 'onlyfans_collector.log'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
scheduler = BackgroundScheduler()

# === HTML –®–ê–ë–õ–û–ù ===
HTML_TEMPLATE = '''
<!doctype html>
<html lang="en">
  <head>
    <title>OnlyFans Dashboard</title>
    <style>
      body { font-family: Arial, sans-serif; margin: 20px; }
      table { border-collapse: collapse; width: 100%; margin-bottom: 30px; }
      th, td { border: 1px solid #ccc; padding: 8px; }
      th { background: #f4f4f4; }
      form { margin-bottom: 20px; }
      .btn { background: #007BFF; color: white; padding: 6px 12px; border: none; cursor: pointer; }
      .btn:hover { background: #0056b3; }
      .status { padding: 10px; margin: 10px 0; border-radius: 4px; }
      .success { background: #d4edda; color: #155724; }
      .error { background: #f8d7da; color: #721c24; }
    </style>
  </head>
  <body>
    <h1>üìä OnlyFans Dashboard</h1>
    
    {% if message %}
    <div class="status {{ message.type }}">{{ message.text }}</div>
    {% endif %}

    <form method="get">
      <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" value="{{ filters.username }}">
      <select name="type">
        <option value="">–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</option>
        <option value="purchase" {% if filters.type == 'purchase' %}selected{% endif %}>–ü–æ–∫—É–ø–∫–∞</option>
        <option value="tip" {% if filters.type == 'tip' %}selected{% endif %}>–ß–∞–µ–≤—ã–µ</option>
      </select>
      <input type="date" name="date" value="{{ filters.date }}">
      <button class="btn" type="submit">–§–∏–ª—å—Ç—Ä</button>
      <a href="{{ url_for('update') }}" class="btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</a>
      <a href="{{ url_for('view_logs') }}" class="btn">üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏</a>
    </form>

    <h2>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (3 –¥–Ω—è)</h2>
    {% if subscribers %}
    <table>
      <tr><th>Username</th><th>–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</th></tr>
      {% for s in subscribers %}
        <tr><td>{{ s[0] }}</td><td>{{ s[1] }}</td></tr>
      {% endfor %}
    </table>
    {% else %}
    <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è</p>
    {% endif %}

    <h2>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h2>
    {% if transactions %}
    <table>
      <tr><th>Username</th><th>–¢–∏–ø</th><th>–°—É–º–º–∞</th><th>–î–∞—Ç–∞</th></tr>
      {% for t in transactions %}
        <tr><td>{{ t[0] }}</td><td>{{ t[1] }}</td><td>{{ t[2] }}</td><td>{{ t[3] }}</td></tr>
      {% endfor %}
    </table>
    {% else %}
    <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö</p>
    {% endif %}
  </body>
</html>
'''

def init_db():
    try:
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        c.execute('''CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY, 
            username TEXT UNIQUE, 
            subscribed_date TEXT, 
            collected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY, 
            username TEXT, 
            amount REAL, 
            type TEXT, 
            date TEXT, 
            collected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        c.execute("DELETE FROM subscribers WHERE username IN ('notifications', 'settings', 'help', 'create', 'statistics')")
        c.execute("DELETE FROM subscribers WHERE LENGTH(username) < 3 OR username LIKE 'u%'")
        c.execute("DELETE FROM subscribers WHERE subscribed_date < ?", 
                 ((datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),))
        
        conn.commit()
        return conn
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

def check_adspower_running():
    try:
        response = requests.get(ADSPOWER_API, timeout=5)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

def start_adspower_browser(profile_id):
    if not check_adspower_running():
        raise Exception("AdsPower –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    try:
        resp = requests.get(f'{ADSPOWER_API}?user_id={profile_id}', timeout=10)
        data = resp.json()
        
        if data.get('code') != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ AdsPower: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        path = data['data']['webdriver']
        debugger = data['data']['ws']['selenium']
        
        options = webdriver.ChromeOptions()
        options.debugger_address = debugger
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-infobars')
        options.add_argument('--disable-notifications')
        
        service = Service(path)
        driver = webdriver.Chrome(service=service, options=options)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ OnlyFans
        driver.get('https://onlyfans.com')
        try:
            WebDriverWait(driver, 10).until(
                lambda d: 'auth' not in d.current_url and 'login' not in d.current_url)
        except TimeoutException:
            raise Exception("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ OnlyFans")
        
        return driver
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞ AdsPower: {e}")
        raise

def scroll_page(driver):
    last_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height

def collect_subscribers(driver, db):
    try:
        logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
        driver.get(SUBSCRIBER_URL)
        time.sleep(5)  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div.table-item'))
            logger.info("–≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except TimeoutException:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        scroll_page(driver)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã OnlyFans 2024
        subscriber_blocks = driver.find_elements(By.CSS_SELECTOR, 'div.table-item:has(a[href^="/"][href*="/profile/"])')
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriber_blocks)} –±–ª–æ–∫–æ–≤ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏")
        
        cur = db.cursor()
        new_subscribers = 0
        
        for block in subscriber_blocks:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                profile_link = block.find_element(By.CSS_SELECTOR, 'a[href^="/"][href*="/profile/"]')
                href = profile_link.get_attribute("href")
                username = href.split("/")[-1]
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                system_usernames = {
                    'notifications', 'settings', 'help', 'create', 'collections',
                    'vault', 'queue', 'statistics', 'active', 'earnings',
                    'dashboard', 'subscribed', 'purchases', 'tags', 'commented',
                    'mentioned', 'favorited', 'message', 'onlyfans'
                }
                
                if (not username or len(username) < 3 or 
                    username in system_usernames or
                    username.startswith('u') or
                    username.isdigit()):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–ª–æ–∫–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                try:
                    username_element = block.find_element(By.CSS_SELECTOR, 'div.user-info span.name')
                    if not username_element.text.strip():
                        continue
                except NoSuchElementException:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                cur.execute("SELECT 1 FROM subscribers WHERE username = ?", (username,))
                if not cur.fetchone():
                    cur.execute(
                        "INSERT INTO subscribers (username, subscribed_date) VALUES (?, ?)",
                        (username, datetime.now().strftime('%Y-%m-%d')))
                    new_subscribers += 1
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {username}")
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {str(e)}")
                continue
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {new_subscribers} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        db.commit()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {str(e)}")
        raise


def collect_transactions(driver, db, url, tx_type):
    try:
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({tx_type})...")
        driver.get(url)
        time.sleep(5)
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        try:
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div.table-item')))
            logger.info("–≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except TimeoutException:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({tx_type})")
            return

        scroll_page(driver)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_blocks = driver.find_elements(By.CSS_SELECTOR, 'div.table-item:has(div.amount)')
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(transaction_blocks)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ {tx_type}")
        
        cur = db.cursor()
        new_transactions = 0
        
        for block in transaction_blocks:
            try:
                # –ü–æ–ª—É—á–∞–µ–º username
                username_element = block.find_element(By.CSS_SELECTOR, 'a[href^="/"][href*="/profile/"]')
                username = username_element.get_attribute("href").split("/")[-1]
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
                amount_element = block.find_element(By.CSS_SELECTOR, 'div.amount')
                amount_text = amount_element.text
                amount = float(amount_text.replace('$', '').replace(',', '').strip())
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
                date_element = block.find_element(By.CSS_SELECTOR, 'div.date')
                date = datetime.now().strftime('%Y-%m-%d')  # –ú–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∏–∑ date_element.text
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                cur.execute("""SELECT 1 FROM transactions 
                            WHERE username=? AND amount=? AND type=? AND date=?""",
                          (username, amount, tx_type, date))
                if not cur.fetchone():
                    cur.execute(
                        "INSERT INTO transactions (username, amount, type, date) VALUES (?, ?, ?, ?)",
                        (username, amount, tx_type, date))
                    new_transactions += 1
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {username} - {amount} - {tx_type}")
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
                continue
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {new_transactions} –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ {tx_type}")
        db.commit()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({tx_type}): {str(e)}")
        raise

def run_collector():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    conn = None
    driver = None
    
    try:
        conn = init_db()
        driver = start_adspower_browser(PROFILE_ID)
        
        collect_subscribers(driver, conn)
        collect_transactions(driver, conn, PURCHASES_URL, 'purchase')
        collect_transactions(driver, conn, TIPS_URL, 'tip')
        
        logger.info("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
        
    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass
        if conn:
            conn.close()

@app.route('/')
def dashboard():
    message = request.args.get('message')
    message_type = request.args.get('message_type')
    
    username = request.args.get('username', '').strip()
    tx_type = request.args.get('type', '')
    date = request.args.get('date', '')
    
    filters = {'username': username, 'type': tx_type, 'date': date}
    message_obj = {'text': message, 'type': message_type} if message else None
    
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
        cur.execute(
            """SELECT username, subscribed_date FROM subscribers 
            WHERE subscribed_date >= ? 
            ORDER BY subscribed_date DESC""",
            ((datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d'),))
        subscribers = cur.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        query = """SELECT username, type, amount, date FROM transactions 
                WHERE 1=1"""
        args = []
        
        if username:
            query += " AND username LIKE ?"
            args.append(f"%{username}%")
        if tx_type:
            query += " AND type = ?"
            args.append(tx_type)
        if date:
            query += " AND date = ?"
            args.append(date)
            
        query += " ORDER BY date DESC"
        cur.execute(query, args)
        transactions = cur.fetchall()

        return render_template_string(
            HTML_TEMPLATE,
            subscribers=subscribers,
            transactions=transactions,
            filters=filters,
            message=message_obj)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ dashboard: {e}")
        return render_template_string(
            HTML_TEMPLATE,
            subscribers=[],
            transactions=[],
            filters=filters,
            message={'text': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}', 'type': 'error'})
            
    finally:
        if conn:
            conn.close()

@app.route('/update')
def update():
    success = run_collector()
    if success:
        return redirect(url_for('dashboard', 
                             message='–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 
                             message_type='success'))
    else:
        return redirect(url_for('dashboard', 
                             message='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 
                             message_type='error'))

@app.route('/logs')
def view_logs():
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            logs = f.read()
        return f'<pre>{logs}</pre>'
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}'

def scheduler_error_listener(event):
    if event.exception:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ: {event.exception}")

if __name__ == '__main__':
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
        scheduler.add_job(run_collector, 'cron', hour=8, id='morning_collection')
        scheduler.add_job(run_collector, 'cron', hour=16, id='afternoon_collection')
        scheduler.add_job(run_collector, 'cron', hour=23, id='evening_collection')
        scheduler.add_listener(scheduler_error_listener, EVENT_JOB_ERROR)
        scheduler.start()

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        run_collector()

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        webbrowser.open("http://localhost:5000")

        # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.run(port=5000)
        
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    finally:
        scheduler.shutdown()